rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write their own user document
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for social features
    }
    
    // Votes - users can only vote if authenticated
    match /votes/{voteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   validateVoteData();
      allow update: if request.auth != null && 
                   request.auth.uid == resource.data.userId &&
                   validateVoteData();
      allow delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }
    
    // Video stats - readable by all, writable by authenticated users
    match /videoStats/{videoId} {
      allow read: if true;
      allow write: if request.auth != null;
    }
    
    // User activity - users can create their own activity, read followed users' activity
    match /userActivity/{activityId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.userId;
    }
    
    // Content reports - authenticated users can create, admins can manage
    match /contentReports/{reportId} {
      allow read: if request.auth != null && isAdmin();
      allow create: if request.auth != null && 
                   request.auth.uid == request.resource.data.reportedBy;
      allow update: if request.auth != null && isAdmin();
    }
    
    // System config - only admins can read/write
    match /systemConfig/{configId} {
      allow read, write: if request.auth != null && isAdmin();
    }
    
    // User following relationships
    match /userFollowing/{followId} {
      allow read: if request.auth != null;
      allow create, delete: if request.auth != null && 
                            request.auth.uid == request.resource.data.followerId;
    }
    
    // Helper functions
    function validateVoteData() {
      return request.resource.data.keys().hasAll(['userId', 'videoId', 'type', 'createdAt']) &&
             request.resource.data.type in ['up', 'down'] &&
             request.resource.data.userId is string &&
             request.resource.data.videoId is string;
    }
    
    function isAdmin() {
      return request.auth.token.email == 'xyzapplywork@gmail.com';
    }
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
  }
}